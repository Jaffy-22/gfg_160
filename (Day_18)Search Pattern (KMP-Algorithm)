/*
Given two strings, one is a text string txt and the other is a pattern string pat. The task is to print the indexes of all the occurrences of the pattern string in the text string. Use 0-based indexing while returning the indices. 
Note: Return an empty list in case of no occurrences of pattern.

Examples :
Input: txt = "abcab", pat = "ab"
Output: [0, 3]
Explanation: The string "ab" occurs twice in txt, one starts at index 0 and the other at index 3. 

Input: txt = "abesdu", pat = "edu"
Output: []
Explanation: There's no substring "edu" present in txt.

Input: txt = "aabaacaadaabaaba", pat = "aaba"
Output: [0, 9, 12]
*/
class Solution {

    ArrayList<Integer> search(String pat, String txt) {
        ArrayList<Integer> indices = new ArrayList<>();
        int n = txt.length();
        int m = pat.length();
        int[] pi = new int[m];
        computePiTable(pi, pat, m);
        
        int i = 0;
        int j = 0;
        
        while (i < n) {
            if (txt.charAt(i) == pat.charAt(j)) {
                i++;
                j++;
            }
            if (j == m) {
                indices.add(i - j );
                j = pi[j - 1];
            } else if (i < n && txt.charAt(i) != pat.charAt(j)) {
                if (j != 0) {
                    j = pi[j - 1];
                } else {
                    i++;
                }
            }
        }
        return indices;
    }

    private void computePiTable(int[] pi, String pat, int m) {
        int prevLongSuffix = 0;
        int i = 1;

        while (i < m) {
            if (pat.charAt(i) == pat.charAt(prevLongSuffix)) {
                prevLongSuffix++;
                pi[i] = prevLongSuffix;
                i++;
            } else {
                if (prevLongSuffix != 0) {
                    prevLongSuffix = pi[prevLongSuffix - 1];
                } else {
                    pi[i] = 0;
                    i++;
                }
            }
        }
    }
}
