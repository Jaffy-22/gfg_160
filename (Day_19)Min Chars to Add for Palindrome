/*
Given a string s, the task is to find the minimum characters to be added at the front to make the string palindrome.
Note: A palindrome string is a sequence of characters that reads the same forward and backward.

Examples:
Input: s = "abc"
Output: 2
Explanation: Add 'b' and 'c' at front of above string to make it palindrome : "cbabc"

Input: s = "aacecaaaa"
Output: 2
Explanation: Add 2 a's at front of above string to make it palindrome : "aaaacecaaaa"
*/
class Solution {
    public static int minChar(String s) {
        // Write your code here
        String revString = new StringBuilder(s).reverse().toString();
        String str = s + "$" + revString;
        int n = str.length();
        int[] pi = new int[n];
        piTable(pi, str, n);
        return s.length() - pi[n - 1];
    }
    private static void piTable(int[] pi, String pat, int n) {
        int prevLongSuffix = 0;
        int i = 1;
        while (i < n) {
            if (pat.charAt(i) == pat.charAt(prevLongSuffix)) {
                prevLongSuffix++;
                pi[i] = prevLongSuffix;
                i++;
            } else {
                if (prevLongSuffix != 0) {
                    prevLongSuffix = pi[prevLongSuffix - 1];
                } else {
                    pi[i] = 0;
                    i++;
                }
            }
        }
    }
}
