/*
Given an array of integers arr[] in a circular fashion. Find the maximum subarray sum that we can get if we assume the array to be circular.

Examples:
Input: arr[] = [8, -8, 9, -9, 10, -11, 12]
Output: 22
Explanation: Starting from the last element of the array, i.e, 12, and moving in a circular fashion, we have max subarray as 12, 8, -8, 9, -9, 10, which gives maximum sum as 22.

Input: arr[] = [10, -3, -4, 7, 6, 5, -4, -1]
Output: 23
Explanation: Maximum sum of the circular subarray is 23. The subarray is [7, 6, 5, -4, -1, 10].

Input: arr[] = [-1, 40, -14, 7, 6, 5, -4, -1] 
Output: 52
Explanation: Circular Subarray [7, 6, 5, -4, -1, -1, 40] has the maximum sum, which is 52.
*/
class Solution {

    // a: input array
    // n: size of array
    // Function to find maximum circular subarray sum.
    public int circularSubarraySum(int arr[]) {

        // Your code here
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        int curMin=0;
        int curMax=0;
        int total=0;
        for(int i=0;i<arr.length;i++)
        {
            curMax=Math.max(arr[i]+curMax,arr[i]);
            curMin=Math.min(arr[i]+curMin,arr[i]);
            total+=arr[i];
            min=Math.min(min,curMin);
            max=Math.max(max,curMax);
        }
        if(max<0)
            return max;
        return Math.max(max, total - min);
    }
}
