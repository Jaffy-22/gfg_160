/*
Given an array arr[] that contains positive and negative integers (may contain 0 as well). Find the maximum product that we can get in a subarray of arr.
Note: It is guaranteed that the output fits in a 32-bit integer.

Examples
Input: arr[] = [-2, 6, -3, -10, 0, 2]
Output: 180
Explanation: The subarray with maximum product is {6, -3, -10} with product = 6 * (-3) * (-10) = 180.

Input: arr[] = [-1, -3, -10, 0, 60]
Output: 60
Explanation: The subarray with maximum product is {60}.

Input: arr[] = [2, 3, 4] 
Output: 24 
Explanation: For an array with all positive elements, the result is product of all elements.
*/
class Solution {
    // Function to find maximum product subarray
    int maxProduct(int[] arr) {
        // code here
        int prod=1;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<arr.length;i++)
        {
            prod*=arr[i];
            max=Math.max(prod,max);
            if(prod==0)
                prod=1;
        }
        prod=1;
        for(int i=arr.length-1;i>=0;i--)
        {
            prod*=arr[i];
            max=Math.max(prod,max);
            if(prod==0)
                prod=1;
        }
        return max;
    }
}
